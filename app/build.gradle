plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

def getVersionName() {
    def p = new Properties()
    def versionFile = file("version.properties")
    versionFile.withInputStream { p.load(it) }
    return "${p['version.major']}.${p['version.minor']}.${p['version.patch']}"
}

def getVersionCode() {
    def p = new Properties()
    def versionFile = file("version.properties")
    versionFile.withInputStream { p.load(it) }
    return p['version.code'].toInteger()
}


android {
    namespace 'icu.pboymt.mayer'
    compileSdk 33

    String vName = getVersionName()
    int vCode = getVersionCode()
    boolean isActions = System.getenv("IS_ACTIONS") == "1"

    defaultConfig {
        applicationId "icu.pboymt.mayer"
        minSdk defaultMinSdkVersion
        targetSdk 33
        versionCode vCode
        versionName vName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    if (isActions) {
        signingConfigs {
            release {
                storeFile file("keystore/release.keystore")
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (isActions) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.2.0'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    //noinspection GradleDependency
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.0.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation "androidx.savedstate:savedstate-ktx:1.2.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation project(path: ':opencv')
    implementation 'androidx.compose.foundation:foundation:1.3.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'org.tinylog:tinylog-api-kotlin:2.6.1'
    implementation 'org.tinylog:tinylog-impl:2.6.1'
    implementation 'androidx.navigation:navigation-compose:2.5.3'
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation 'com.github.alorma:compose-settings-ui-m3:0.25.0'
    implementation 'com.github.alorma:compose-settings-storage-datastore:0.25.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"

//    implementation project(":opencv")
}

// Create a task, which will watch assets folder and list all files to a kotlin file
// This file will be used to access assets from the app
task listAssets {
    doLast {
        def assetsDir = file("src/main/assets/templates")
        def assetsFile = file("src/main/java/icu/pboymt/mayer/assets/Tpls.kt")
        def assetsList = assetsDir.listFiles().collect { it.name }
        assetsFile.write("package icu.pboymt.mayer.assets\n\n")
        assetsFile.append("import androidx.annotation.Keep\n\n")
        assetsFile.append("@Suppress(\"unused\", \"SpellCheckingInspection\")\n")
        assetsFile.append("@Keep\n")
        assetsFile.append("object Tpls {\n")
        assetsList.each {
            def key = it.replace(".png", "").replace("-", "_").toUpperCase()
            assetsFile.append("    const val $key = \"templates/$it\"\n")
        }
        assetsFile.append("}\n")
    }
}

task outputVersionInfo {
    doLast {
        def versionProps = new Properties()
        def versionFile = file("version.properties")
        versionFile.withInputStream { versionProps.load(it) }
        // Concat major, minor and patch version
        def versionName = "${versionProps['version.major']}.${versionProps['version.minor']}.${versionProps['version.patch']}"
        // Load version code from version.properties
        def versionCode = versionProps['version.code'].toInteger()
        // Print them to console
        println "Version name: $versionName"
        println "Version code: $versionCode"
    }
}

task incrementVersionMajor {
    doLast {
        def versionProps = new Properties()
        def versionFile = file("version.properties")
        versionFile.withInputStream { versionProps.load(it) }
        // Increment major version
        versionProps['version.major'] = (versionProps['version.major'].toInteger() + 1).toString()
        // Reset minor and patch version
        versionProps['version.minor'] = "0"
        versionProps['version.patch'] = "0"
        // Increment version code
        versionProps['version.code'] = (versionProps['version.code'].toInteger() + 1).toString()
        // Save version.properties
        versionFile.withOutputStream { versionProps.store(it, null) }
    }
}

task incrementVersionMinor {
    doLast {
        def versionProps = new Properties()
        def versionFile = file("version.properties")
        versionFile.withInputStream { versionProps.load(it) }
        // Increment minor version
        versionProps['version.minor'] = (versionProps['version.minor'].toInteger() + 1).toString()
        // Reset patch version
        versionProps['version.patch'] = "0"
        // Increment version code
        versionProps['version.code'] = (versionProps['version.code'].toInteger() + 1).toString()
        // Save version.properties
        versionFile.withOutputStream { versionProps.store(it, null) }
    }
}

task incrementVersionPatch {
    doLast {
        def versionProps = new Properties()
        def versionFile = file("version.properties")
        versionFile.withInputStream { versionProps.load(it) }
        // Increment patch version
        versionProps['version.patch'] = (versionProps['version.patch'].toInteger() + 1).toString()
        // Increment version code
        versionProps['version.code'] = (versionProps['version.code'].toInteger() + 1).toString()
        // Save version.properties
        versionFile.withOutputStream { versionProps.store(it, null) }
    }
}